{
  "notifications": [
    {
      "id": "1",
      "title": "Уведомление 1",
      "description": "Произошло какое-то событие",
      "userId": "1"
    },
    {
      "id": "2",
      "title": "Уведомление 2",
      "description": "Произошло какое-то событие",
      "userId": "1",
      "href": "http://localhost:3000/admin"
    },
    {
      "id": "3",
      "title": "Уведомление 3",
      "description": "Произошло какое-то событие",
      "userId": "1",
      "href": "http://localhost:3000/admin"
    },
    {
      "id": "4",
      "title": "Уведомление 4",
      "description": "Произошло какое-то событие",
      "userId": "1"
    },
    {
      "id": "5",
      "title": "Уведомление 1",
      "description": "Произошло какое-то событие",
      "userId": "2"
    }
  ],
  "posts": [
    {
      "id": "1",
      "title": "json-server",
      "userId": "1"
    },
    {
      "id": "2",
      "title": "json-server",
      "userId": "2"
    }
  ],
  "articles": [
    {
      "id": "1",
      "title": "JavaScript News!",
      "subtitle": "Что добавили нового в ECMAScript 2023",
      "img": "https://upload.wikimedia.org/wikipedia/commons/thumb/6/6a/JavaScript-logo.png/800px-JavaScript-logo.png",
      "views": 1022,
      "createdAt": "26.02.2022",
      "userId": "1",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "order": 2,
          "type": "TEXT",
          "title": "ECMAScript2023 (ES14)",
          "paragraphs": [
            "Традиционно обновления ECMAScript публикуются в июне. Но уже сейчас можно посмотреть 14-ю редакцию ECMAScript от 2023, которая сейчас находится в статусе freezed, т.е. никакие изменения в нее вноситься уже не будут.",
            "В данной версии спецификации не такой большой список изменений, что абсолютно нормально когда мы переходим на годовой цикл релиза.",
            "Итак, спецификация 2023 года представила нам методы toSorted, toReversed, with, findLast и findLastIndex для Array.prototypeи TypedArray.prototype,в\nа также метод toSpliced для Array.prototype.",
            "Кроме того добавлена поддержка #! комментарии в начале файлов для облегчения запуска исполняемых файлов ECMAScript.",
            "и разрешено использовать Symbols в качестве ключей в WeakMap.\n",
            "Подробнее обо всем можно почитать в официальном репозитории организации Ecma International TC39.\n"
          ]
        },
        {
          "id": "2",
          "order": 4,
          "type": "TEXT",
          "title": ".findlast() и .findLastIndex() для Array и TypedArray",
          "paragraphs": [
            "Предназначены для поиска элементов в массиве.\n",
            "Работают так же, как .find() и .findIndex(), но итерируются в обратном порядке."
          ]
        },
        {
          "id": "3",
          "order": 3,
          "type": "CODE",
          "code": "const array = [{ value: 1 }, { value: 2 }, { value: 3 }, { value: 4 }];\n\narray.find(n => n.value % 2 === 1); // { value: 1 }\narray.findIndex(n => n.value % 2 === 1); // 0\n\n// ======== Before the proposal =========== \n// find\n[...array].reverse().find(n => n.value % 2 === 1); // { value: 3 }\n\n// findIndex\narray.length - 1 - [...array].reverse().findIndex(n => n.value % 2 === 1); // 2\narray.length - 1 - [...array].reverse().findIndex(n => n.value === 42); // should be -1, but 4\n\n// ======== In the proposal =========== \n// find\narray.findLast(n => n.value % 2 === 1); // { value: 3 }\n// findIndex\narray.findLastIndex(n => n.value % 2 === 1); // 2\narray.findLastIndex(n => n.value === 42); // -1"
        },
        {
          "id": "4",
          "order": 1,
          "type": "TEXT",
          "title": "ECMAScript 2025",
          "paragraphs": [
            "На официальном сайте уже опубликован драфт на 2024 год, но какие изменения в него войдут пока достоверно неизвестно.\n"
          ]
        },
        {
          "id": "5",
          "order": 5,
          "type": "IMAGE",
          "src": "https://habrastorage.org/r/w1560/getpro/habr/upload_files/b26/f56/47a/b26f5647a7b761dac02a2832828fc1a9.png",
          "title": "ES, ECMAScript 2024"
        },
        {
          "id": "6",
          "order": 6,
          "type": "TEXT",
          "title": "ECMAScript2023 (ES14)",
          "paragraphs": [
            "Традиционно обновления ECMAScript публикуются в июне. Но уже сейчас можно посмотреть 14-ю редакцию ECMAScript от 2023, которая сейчас находится в статусе freezed, т.е. никакие изменения в нее вноситься уже не будут.в",
            "и разрешено использовать Symbols в качестве ключей в WeakMap.\n",
            "Подробнее обо всем можно почитать в официальном репозитории организации Ecma International TC39.\n"
          ]
        },
        {
          "id": "8",
          "order": 8,
          "type": "CODE",
          "code": "const array = [{ value: 1 }, { value: 2 }, { value: 3 }, { value: 4 }];\n\narray.find(n => n.value % 2 === 1); // { value: 1 }\narray.findIndex(n => n.value % 2 === 1); // 0\n\n// ======== Before the proposal =========== \n// find\n[...array].reverse().find(n => n.value % 2 === 1); // { value: 3 }\n\n// findIndex\narray.length - 1 - [...array].reverse().findIndex(n => n.value % 2 === 1); // 2\narray.length - 1 - [...array].reverse().findIndex(n => n.value === 42); // should be -1, but 4\n\n// ======== In the proposal =========== \n// find\narray.findLast(n => n.value % 2 === 1); // { value: 3 }\n// findIndex\narray.findLastIndex(n => n.value % 2 === 1); // 2\narray.findLastIndex(n => n.value === 42); // -1"
        }
      ]
    },
    {
      "id": "2",
      "title": "Python News",
      "subtitle": "Что добавили нового в Python 2023",
      "img": "https://www.sketchappsources.com/resources/source-image/python-logo.png",
      "views": 1442,
      "createdAt": "26.02.2022",
      "userId": "2",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "order": 1,
          "type": "TEXT",
          "title": "ECMAScript2023 (ES14)",
          "paragraphs": [
            "Традиционно обновления ECMAScript публикуются в июне. Но уже сейчас можно посмотреть 14-ю редакцию ECMAScript от 2023, которая сейчас находится в статусе freezed, т.е. никакие изменения в нее вноситься уже не будут.",
            "В данной версии спецификации не такой большой список изменений, что абсолютно нормально когда мы переходим на годовой цикл релиза.",
            "Итак, спецификация 2023 года представила нам методы toSorted, toReversed, with, findLast и findLastIndex для Array.prototypeи TypedArray.prototype,\nа также метод toSpliced для Array.prototype.",
            "Кроме того добавлена поддержка #! комментарии в начале файлов для облегчения запуска исполняемых файлов ECMAScript.",
            "и разрешено использовать Symbols в качестве ключей в WeakMap.\n",
            "Подробнее обо всем можно почитать в официальном репозитории организации Ecma International TC39.\n"
          ]
        },
        {
          "id": "2",
          "order": 2,
          "type": "TEXT",
          "title": ".findlast() и .findLastIndex() для Array и TypedArray",
          "paragraphs": [
            "Предназначены для поиска элементов в массиве.\n",
            "Работают так же, как .find() и .findIndex(), но итерируются в обратном порядке."
          ]
        },
        {
          "id": "3",
          "order": 3,
          "type": "CODE",
          "code": "const array = [{ value: 1 }, { value: 2 }, { value: 3 }, { value: 4 }];\n\narray.find(n => n.value % 2 === 1); // { value: 1 }\narray.findIndex(n => n.value % 2 === 1); // 0\n\n// ======== Before the proposal =========== \n// find\n[...array].reverse().find(n => n.value % 2 === 1); // { value: 3 }\n\n// findIndex\narray.length - 1 - [...array].reverse().findIndex(n => n.value % 2 === 1); // 2\narray.length - 1 - [...array].reverse().findIndex(n => n.value === 42); // should be -1, but 4\n\n// ======== In the proposal =========== \n// find\narray.findLast(n => n.value % 2 === 1); // { value: 3 }\n// findIndex\narray.findLastIndex(n => n.value % 2 === 1); // 2\narray.findLastIndex(n => n.value === 42); // -1"
        },
        {
          "id": "4",
          "order": 4,
          "type": "TEXT",
          "title": "ECMAScript 2024",
          "paragraphs": [
            "На официальном сайте уже опубликован драфт на 2024 год, но какие изменения в него войдут пока достоверно неизвестно.\n"
          ]
        },
        {
          "id": "5",
          "order": 5,
          "type": "IMAGE",
          "src": "https://habrastorage.org/r/w1560/getpro/habr/upload_files/b26/f56/47a/b26f5647a7b761dac02a2832828fc1a9.png",
          "title": "ES, ECMAScript 2024"
        },
        {
          "id": "6",
          "order": 6,
          "type": "TEXT",
          "title": "ECMAScript2023 (ES14)",
          "paragraphs": [
            "Традиционно обновления ECMAScript публикуются в июне. Но уже сейчас можно посмотреть 14-ю редакцию ECMAScript от 2023, которая сейчас находится в статусе freezed, т.е. никакие изменения в нее вноситься уже не будут.",
            "и разрешено использовать Symbols в качестве ключей в WeakMap.\n",
            "Подробнее обо всем можно почитать в официальном репозитории организации Ecma International TC39.\n"
          ]
        },
        {
          "id": "7",
          "order": 7,
          "type": "IMAGE",
          "src": "https://habrastorage.org/r/w1560/getpro/habr/upload_files/b26/f56/47a/b26f5647a7b761dac02a2832828fc1a9.png",
          "title": "ES, ECMAScript 2024"
        },
        {
          "id": "8",
          "order": 8,
          "type": "CODE",
          "code": "const array = [{ value: 1 }, { value: 2 }, { value: 3 }, { value: 4 }];\n\narray.find(n => n.value % 2 === 1); // { value: 1 }\narray.findIndex(n => n.value % 2 === 1); // 0\n\n// ======== Before the proposal =========== \n// find\n[...array].reverse().find(n => n.value % 2 === 1); // { value: 3 }\n\n// findIndex\narray.length - 1 - [...array].reverse().findIndex(n => n.value % 2 === 1); // 2\narray.length - 1 - [...array].reverse().findIndex(n => n.value === 42); // should be -1, but 4\n\n// ======== In the proposal =========== \n// find\narray.findLast(n => n.value % 2 === 1); // { value: 3 }\n// findIndex\narray.findLastIndex(n => n.value % 2 === 1); // 2\narray.findLastIndex(n => n.value === 42); // -1"
        }
      ]
    },
    {
      "id": "3",
      "title": "В России стали дорожать видеокарты и другая электроника ",
      "subtitle": "На фоне падения курса рубля.",
      "img": "https://leonardo.osnova.io/ab2758fd-e6b9-5c7d-a795-dd1bd53fc85a/-/preview/1700/-/format/webp/",
      "views": 6345,
      "createdAt": "12.08.2023",
      "userId": "3",
      "type": [
        "COMPUTER_SCIENCE"
      ],
      "blocks": [
        {
          "id": "1",
          "order": 1,
          "type": "IMAGE",
          "src": "https://leonardo.osnova.io/20a07ad2-4ee4-56c1-a163-2485321e2dc6/-/preview/1700/-/format/webp/",
          "title": "Курс рубля"
        },
        {
          "id": "2",
          "order": 2,
          "type": "TEXT",
          "title": "Как изменились цены к 12 августа 2023 года",
          "paragraphs": [
            "Примечание: в скобках указаны цены на конец июня.\n\nPalit GeForce RTX 3080 Ti GamingPro — 156 999 рублей (было 88 499 рублей)\nPalit GeForce RTX 4070 Dual OC — 70 499 рублей (было 60 499 рублей)\nPalit GeForce RTX 4070 Ti — 86 999 рублей (было 81 999)\nPalit GeForce RTX 4080 GameRock — 121 499 рублей (было 111 499 рублей)\nGigabyte GeForce RTX 4090 AERO — 184 999 рублей (было 169 999 рублей)\nAMD Ryzen 9 5950X — 39 499 рублей (было 34 799 рублей)\nIntel Core i9-12900K — 44 999 рублей (было 35 499 рублей)\nXbox Series S — 30 499 рублей (было 26 999 рублей)\nXbox Series X — 45 999 рублей (было 40 439 рублей)\nPlayStation 5 с дисководом — 59 999 рублей (было 56 999 рублей)\nNintendo Switch OLED — 35 999 рублей (было 33 499 рублей)",
            "Важно отметить, что на момент написания заметки стоимость некоторых комплектующих для ПК не изменилась по сравнению с июнем или маем 2023 года. Кроме того, во многих случаях произошло относительно небольшое подорожание в пределах 1-3 тысячи рублей. Тем не менее наблюдается общая тенденция к росту стоимости электроники.",
            "По прогнозам экспертов, опрошенных РБК, в августе 2023 года курс евро будет меняться в диапазоне от 91 до 111 рублей. Аналитики считают, что в течение месяца курс доллара останется в рамках от 82 до 102 рублей."
          ]
        }
      ]
    },
    {
      "id": "4",
      "title": "Как пишут компьютерные программы в NASA",
      "subtitle": "Многие, уверен, руководствуются теми же принципами в написании софта, но все таки взять на вооружение эти вещи стоит даже тем, кто об этом сильно не задумывался. Понятное дело, ровно в тех ситуациях, где это имеет смысл.",
      "img": "https://miro.medium.com/v2/resize:fit:1400/1*BpZ-ansYXLc38SOfx6Qhcg.jpeg",
      "views": 6345,
      "createdAt": "17.06.2023",
      "userId": "1",
      "type": [
        "COMPUTER_SCIENCE"
      ],
      "blocks": [
        {
          "id": "1",
          "order": 1,
          "type": "TEXT",
          "title": "Посмотрите видео!",
          "paragraphs": [
            "Узнать про это можно здесь: https://www.youtube.com/watch?v=GWYhtksrmhE&embeds_referring_euri=https%3A%2F%2Fdtf.ru%2F&embeds_referring_origin=https%3A%2F%2Fdtf.ru&source_ve_path=MjM4NTE&feature=emb_title"
          ]
        }
      ]
    },
    {
      "id": "5",
      "title": "В России представили компьютеры «Бобёр» и «Ворон» с отечественной материнской платой и процессорами Intel",
      "subtitle": "Подходят даже для требовательных задач, включая игры.",
      "img": "https://leonardo.osnova.io/b7abc3e6-e512-5dc8-bb2e-a31bf9f9123b/-/preview/1700/-/format/webp/",
      "views": 1300,
      "createdAt": "17.06.2023",
      "userId": "1",
      "type": [
        "COMPUTER_SCIENCE"
      ],
      "blocks": [
        {
          "id": "1",
          "order": 1,
          "type": "TEXT",
          "title": "Что тут у нас?",
          "paragraphs": [
            "В июле 2023 года компания Delta Computers представила компьютеры «Бобёр» BBiH2 и «Ворон» VRiH2, оснащённые собственной материнской платой «Анемона 2» на базе чипсета Intel H610. Она поддерживает современные процессоры Intel Core Alder Lake и Raptor Lake.",
            "«Бобёр» BBiH2 — компьютер с форм-фактором SFF, предназначенный для офисных задач. Компактный корпус даёт возможность эффективно использовать рабочее пространство сотрудника, заявили в Delta Computers.",
            "«Ворон» VRiH2 — универсальный компьютер с классическим mini-Tower-корпусом. Эта модель со слотом PCIe 5.0x16 подходит для работы с ресурсоёмким ПО, в том числе для видеомонтажа и САПР-моделирования.",
            "Обе модели поддерживают скоростные М.2 NVMe-накопители, до 64 ГБ оперативной памяти стандарта DDR4 с частотой 3200 МГц, до 16 ТБ SSD или HDD, оснащены видеовыходами DP, HDMI и VGA, а также портами USB-A 3.2 Gen 2 и USB Type-C 3.2 Gen 1.",
            "В Delta Computers опубликовали подробные характеристики компьютеров на своём сайте. Стоимость этих ПК пока неизвестна."
          ]
        },
        {
          "id": "2",
          "order": 2,
          "type": "IMAGE",
          "src": "https://leonardo.osnova.io/3d84cd0c-faf7-52d1-a0dd-10bde986ed46/-/resize/1910/-/format/webp/",
          "title": "«Ворон» VRiH2"
        },
        {
          "id": "3",
          "order": 3,
          "type": "IMAGE",
          "src": "https://leonardo.osnova.io/53243828-546c-5238-b6f8-15bf4cdcd22e/-/resize/1910/-/format/webp/",
          "title": "«Бобёр» BBiH2"
        }
      ]
    },
    {
      "id": "6",
      "title": "Илон Маск показал, как два робота Optimus собирают третьего, и заявил, что это подразделение превзойдет автомобильное\n",
      "subtitle": "Илон Маск, зачем?",
      "img": "https://leonardo.osnova.io/ed7279e6-e942-552b-be91-a23082e629f6/-/preview/1700/-/format/webp/",
      "views": 1902,
      "createdAt": "03.03.2023",
      "userId": "1",
      "type": [
        "COMPUTER_SCIENCE"
      ],
      "blocks": [
        {
          "id": "1",
          "order": 1,
          "type": "TEXT",
          "title": "Что тут у нас?",
          "paragraphs": [
            "В рамках Дня инвестора 2023 Tesla показала новое видео демонстрации роботов Optimus. Спустя 19 месяцев после первоначального объявления робот Tesla теперь способен ходить и выполнять множество задач.",
            "Илон Маск добавил, что еще в октябре прошлого года робота пришлось выкатить на сцену, чтобы он мог помахать публике. Робот теперь способен ходить самостоятельно, хотя «это не паркур», добавил Маск. Он заявил, что скорость разработки довольно значительная, и сейчас у компании есть несколько роботов.",
            "Илон Маск сказал, что ранее робота пришлось выкатить на сцену, чтобы он мог помахать публике. А теперь он способен ходить самостоятельно, хотя «это не паркур», добавил Маск. Он заявил, что скорость разработки довольно значительная, и сейчас робот уже не один.",
            "Подробнее можно узнать здесь: https://www.youtube.com/watch?v=2dS0aDMQoD4&t=5s",
            "Илон Маск сказал, что ранее робота пришлось выкатить на сцену, чтобы он мог помахать публике. А теперь он способен ходить самостоятельно, хотя «это не паркур», добавил Маск. Он заявил, что скорость разработки довольно значительная, и сейчас робот уже не один.",
            "На показанном видео Оптимус идет, хотя и довольно медленно. Также был показан фрагмент, в котором один робот сначала берет механическую руку со стенда, затем переносит ее на место сборки, где второй робот фиксирует руку на корпусе третьего робота.",
            "Илон Маск добавил, что инвесторы пока не осознают потенциал этого направления, но роботы в будущем превзойдут автомобильное подразделение по объему бизнеса."
          ]
        }
      ]
    },
    {
      "id": "7",
      "title": "Как начинать проект на Go в 2023 году",
      "subtitle": "Когда-то я написал статью о том, как начинать проект на Go в 2018 году. С тех пор многое изменилось, и я захотел написать обновлённую версию статьи. В ней я расскажу всё, что нужно новичку, чтобы приступить к работе с Go.",
      "img": "https://upload.wikimedia.org/wikipedia/commons/thumb/0/05/Go_Logo_Blue.svg/1280px-Go_Logo_Blue.svg.png",
      "views": 1902,
      "createdAt": "03.03.2023",
      "userId": "1",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "order": 1,
          "type": "TEXT",
          "title": "Установка/настройка",
          "paragraphs": [
            "Первым делом нужно скачать и установить Go. Рекомендую всегда устанавливать его с самого вебсайта Go https://golang.org/ и выполнить инструкции для соответствующей операционной системы. За исключением релиза Go 1.18 (в который включены дженерики), у меня никогда не было проблем с установкой последней версии Go и компиляцией. Обещания обратной совместимости выполняются. Настолько, что если в файле go.mod проекта написано 1.20, но он не использует функциональность 1.20, то, вероятно, вы всё равно сможете скомпилировать его в более раннем релизе.",
            "В старых руководствах рекомендовалось настроить $GOPATH. В 2023 году об этом можно спокойно забыть. Если вам любопытно, то прочитайте мой предыдущий пост. Однако всё переместилось или перемещается в модули, поэтому воспринимайте это как то, чему вам не нужно учиться.",
            "Единственное, что я рекомендую — обновить путь своих машин, чтобы он указывал на папку bin стандартного $GOPATH, export PATH=$PATH:$(go env GOPATH)/bin, чтобы можно было установить всё, с чем вы работаете, и всё это было доступно отовсюду. Например, на моей машине это выглядит так:"
          ]
        },
        {
          "id": "2",
          "order": 2,
          "type": "CODE",
          "code": "# boyter @ Bens-MacBook-Air in ~/go/bin [10:04:57] \n\n$ tree\n\n.\n\n├── boltbrowser\n\n├── cs\n\n├── dcd\n\n├── goreleaser\n\n├── gow\n\n├── hashit\n\n├── lc\n\n├── scc"
        },
        {
          "id": "3",
          "order": 3,
          "type": "TEXT",
          "paragraphs": [
            "В моём dotfile для получения показанного выше указано export PATH=/Users/boyter/go/bin:$PATH.",
            "Благодаря экспортированному пути я могу выполнять scc, dcd and lc из любого места, сначала запустив go install для проекта, над которым работаю. В Windows я ещё и делаю при помощи WSL $GOPATH общим между Windows и Linux, чтобы можно было работать над одним кодом в обеих ОС, поэтому вы увидите файлы .exe. Для этого достаточно выполнить симлинк внутри WSL на папку в Windows."
          ]
        },
        {
          "id": "4",
          "order": 4,
          "type": "TEXT",
          "title": "Редактор",
          "paragraphs": [
            "Судя по последнему опросу разработчиков на Go, большинство людей кодит на Go в Visual Studio Code или Jetbrains Goland, поэтому я буду рассматривать только эти редакторы.",
            "Goland работает практически без настройки и именно в нём я пишу код каждый день. Если у вас установлен Go, то он должен его найти и начать работать. Самая большая проблема возникает, когда выходят новые релизы Go. Это сбивает Goland с толку и может что-нибудь поломать, например, отладчик. Чтобы избежать этой проблемы, обновляйте релиз примерно спустя неделю, чтобы команда Jetbrains успела внести обновления в редактор.",
            "Иногда в macOS эти обновления приводят к бесконечному циклу команды clang, требующей инструментов разработчика командной строки. Об устранении этой проблемы я писал; всё сводится к запуску xcodebuild -runFirstLaunch.",
            "Visual Studio Code проделал большой путь и стал гораздо лучше, чем когда я начинал работать с Go. Установите последнюю версию, а затем расширение Go in Visual Studio Code. Вы получите intellisense, реформатирование и нужную вам функциональность автоматического импорта/удаления импорта. Предположительно, отладка сейчас тоже работает, но я не могу сказать об этом с уверенностью.",
            "Я по-прежнему предпочитаю платить и пользоваться Goland, потому что это похоже на совместную работу с прекрасным инженером, который никогда не спит и почти никогда не ошибается. Его способность генерировать табличные тесты и выполнять отдельные тесты экономит кучу времени, а его инструменты рефакторинга великолепны. Однако ради этого поста я попробовал несколько часов поработать в Visual Studio Code и был очень впечатлён, поэтому без проблем могу его рекомендовать."
          ]
        }
      ]
    },
    {
      "id": "8",
      "title": "Kotlin Best Practices",
      "subtitle": "Улучши свой код",
      "img": "https://upload.wikimedia.org/wikipedia/commons/thumb/0/06/Kotlin_Icon.svg/2048px-Kotlin_Icon.svg.png",
      "views": 542,
      "createdAt": "12.08.2023",
      "userId": "1",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "order": 1,
          "type": "TEXT",
          "title": "Введение",
          "paragraphs": [
            "Kotlin, созданный всего 5 лет назад, с 2019 года считается приоритетным языком программирования под Android. И все же этот язык достаточно молод и продолжает развиваться, поэтому иногда бывает непонятно, каким образом лучше написать код. У нас в команде часто бывают обсуждения на тему чистого Kotlin-кода, и на их основе мы составили свои best practices. Хотим поделиться этими рекомендациями и ждем ваших вопросов.",
            "Ну что ж, приступим! В первую очередь, в Котлине много синтаксического сахара, и если им злоупотреблять, то читать такой код становится затруднительно. Следующие несколько пунктов можно отнести к борьбе между краткостью и читаемостью. "
          ]
        },
        {
          "id": "2",
          "order": 2,
          "type": "IMAGE",
          "src": "https://habrastorage.org/r/w1560/getpro/habr/upload_files/c9a/ec9/d6b/c9aec9d6b0e83fde3efff319f72de866.png"
        },
        {
          "id": "3",
          "order": 3,
          "type": "TEXT",
          "title": "Не пишите объявление класса в одну строчку",
          "paragraphs": [
            "Даже если сегодня объявление вашего класса уместилось в одну строчку и не выходит за поля – завтра может добавиться еще один аргумент в конструктор или еще один интерфейс в список наследуемых типов. В таком случае этот самый список может уехать вправо и пропасть из поля видимости."
          ]
        },
        {
          "id": "4",
          "order": 4,
          "type": "CODE",
          "code": "class ChannelViewModel(\n       val conversationId: String,\n       getChannelUseCase: GetChannelUseCase,\n) : ViewModel() {"
        },
        {
          "id": "5",
          "order": 5,
          "type": "TEXT",
          "paragraphs": [
            "Размещая каждый параметр конструктора на отдельной строке, мы также получаем бонусы:",
            "Если при рефакторинге надо поменять местами параметры, сделать это будет быстрее (в Android Studio сдвигаем строчку кода вверх/вниз с помощью сочетания клавиш Shift+Command+Up/Down)",
            "В гите изменения параметров будут отображаться более наглядно."
          ]
        },
        {
          "id": "6",
          "order": 6,
          "type": "TEXT",
          "title": "Вложенный return",
          "paragraphs": [
            "Рассмотрим такой пример:"
          ]
        },
        {
          "id": "7",
          "order": 7,
          "type": "CODE",
          "code": "data class MyClass(val number: Int, val flag: Boolean)\n\nfun create(numberParam: Int?, flag: Boolean?): MyClass? {\n   return MyClass(numberParam ?: return null, flag == true)\n}"
        },
        {
          "id": "8",
          "order": 8,
          "type": "TEXT",
          "paragraphs": [
            "Обычно если мы доходим до выражения с return, то это такая точка, в которой завершается выполнение функции. В этом же примере в случае, когда numberParam равен null,  мы мысленно проходим сперва через return MyClass(...) и затем через return null. Лучше в данном случае использовать простой if, чтобы поток выполнения программы выглядел понятнее:"
          ]
        },
        {
          "id": "9",
          "order": 9,
          "type": "CODE",
          "code": "fun create(numberParam: Int?, flag: Boolean?): MyClass? {\n   if (numberParam == null) {\n       return null\n   }\n   return MyClass(numberParam, flag == true)\n}"
        }
      ]
    },
    {
      "id": "9",
      "title": "Kafka UI краткий гайд",
      "subtitle": "Самый надежный брокер сообщений",
      "img": "https://icons.iconarchive.com/icons/pictogrammers/material/512/apache-kafka-icon.png",
      "views": 1256,
      "createdAt": "23.04.2023",
      "userId": "1",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "order": 1,
          "type": "TEXT",
          "title": "Предыстория",
          "paragraphs": [
            "Буквально недавно я начал создавать свой аналог сервиса Discord, используя веб-сокеты и передавая сообщения через очередь. В один из моментов мне понадобилось проверить, корректно ли проходят сообщения в этой очереди. Тогда я осознал, как неудобно каждый раз заходить в docker контейнер и вручную вводить команду для просмотра всех сообщений в топиках. После дня анализа и советов от моего коллеги, опытного DevOps-инженера Паши, я пришел к выводу, что kafka-ui от команды provectus — это наилучший и наиболее удобный инструмент для визуализации данных в Kafka."
          ]
        },
        {
          "id": "2",
          "order": 2,
          "type": "TEXT",
          "title": "Docker-Compose",
          "paragraphs": [
            "Для начала давайте настроем наш docker-compose под современные реалии kafka. Для этого у нас будет использоваться 2 основных образа\n\nzookeeper\n\nkafka"
          ]
        },
        {
          "id": "3",
          "order": 3,
          "type": "CODE",
          "code": "services:\n  zookeeper:\n    image: confluentinc/cp-zookeeper:7.2.1\n    hostname: zookeeper\n    container_name: zookeeper\n    ports:\n      - \"2181:2181\"\n    environment:\n      ZOOKEEPER_CLIENT_PORT: 2181\n      ZOOKEEPER_TICK_TIME: 2000\n\n  kafka:\n    image: confluentinc/cp-server:7.2.1\n    hostname: kafka\n    container_name: kafka\n    depends_on:\n      - zookeeper\n    ports:\n      - \"9092:9092\"\n      - \"9997:9997\"\n    environment:\n      KAFKA_BROKER_ID: 1\n      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0\n      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1\n      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1\n      KAFKA_JMX_PORT: 9997\n      KAFKA_JMX_HOSTNAME: kafka"
        },
        {
          "id": "4",
          "order": 4,
          "type": "TEXT",
          "paragraphs": [
            "В параметрах образа для ZooKeeper основное — это указание рабочего порта. Я также добавил параметр tick_time, который, хоть и не является обязательным, я по привычке всегда указываю. Вкратце, tick_time используется для синхронизации реплик и задания таймаутов различных операций.",
            "По конфигурации Kafka ситуация аналогичная: основное — это рабочий порт и базовые конфигурационные параметры, связанные с ZooKeeper. Но ключевым моментом здесь является работа с JMX (Java Management Extensions). JMX — это стандартные средства для мониторинга и управления приложениями, работающими на Java. В рамках Apache Kafka, JMX позволяет мониторить различные метрики работы брокера. Для наших нужд достаточно указать порт и имя хоста для JMX, который, как вы возможно догадались, в дальнейшем будет использоваться в kafka-ui.",
            "Последний этап — это настройка образа для kafka-ui. Ознакомившись с официальной документацией команды provectus, вы найдете множество шаблонов для kafka-ui в комбинации с другими сервисами. Однако, стартовый шаблон для связки Kafka, ZooKeeper и kafka-ui на официальном сайте отсутствует. Так что я предоставлю вам свою рабочую версию файла compose."
          ]
        },
        {
          "id": "5",
          "order": 5,
          "type": "CODE",
          "code": "version: '2'\nservices:\n  zookeeper:\n    image: confluentinc/cp-zookeeper:7.2.1\n    hostname: zookeeper\n    container_name: zookeeper\n    ports:\n      - \"2181:2181\"\n    environment:\n      ZOOKEEPER_CLIENT_PORT: 2181\n      ZOOKEEPER_TICK_TIME: 2000\n\n  kafka:\n    image: confluentinc/cp-server:7.2.1\n    hostname: kafka\n    container_name: kafka\n    depends_on:\n      - zookeeper\n    ports:\n      - \"9092:9092\"\n      - \"9997:9997\"\n    environment:\n      KAFKA_BROKER_ID: 1\n      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0\n      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1\n      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1\n      KAFKA_JMX_PORT: 9997\n      KAFKA_JMX_HOSTNAME: kafka\n\n  kafka-ui:\n    container_name: kafka-ui\n    image: provectuslabs/kafka-ui:latest\n    ports:\n      - 8082:8080\n    environment:\n      DYNAMIC_CONFIG_ENABLED: true"
        },
        {
          "id": "6",
          "order": 6,
          "type": "TEXT",
          "paragraphs": [
            "Здесь, как вы можете увидеть, мы указываем рабочий порт, образ (image), который Docker должен загрузить, а также переменную \"DYNAMIC_CONFIG_ENABLED\". Она нужна, что неудивительно, для возможности изменения конфигурации вашего kafka-ui в реальном времени. С полным списком переменных окружения вы можете ознакомиться, перейдя по предоставленной ссылке."
          ]
        }
      ]
    },
    {
      "id": "10",
      "title": "Стоит ли связываться с C#",
      "subtitle": "На рынке есть десятки популярных ЯПов, и сеть набита статьями для новичков: какой язык выбрать? Мы решили сделать подборку статей с субъективным обзором языков для профессионалов, которые ищут, в какую сторону можно расширить свой кругозор.",
      "img": "https://upload.wikimedia.org/wikipedia/commons/thumb/b/bd/Logo_C_sharp.svg/1200px-Logo_C_sharp.svg.png",
      "views": 4880,
      "createdAt": "12.05.2023",
      "userId": "2",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "order": 1,
          "type": "TEXT",
          "title": "Шарпы — популярны",
          "paragraphs": [
            "Все плюсы и минусы технологии вытекают из этого факта. Огромное сообщество, тысячи библиотек на все случаи жизни, превосходный туллинг — всё есть. Когда приходишь в дотнет, у тебя нет никаких проблем. Есть Visual Studio и Rider — сверхсовременные IDE, которые сами умеют создавать все основные шаблоны проектов, скачивать все необходимое, чтобы они заработали, и собирать их по нажатию кнопочки.",
            "Туллинг по-настоящему взрослый. Линтеры делались долго и вдумчиво, компилятор набит фичами под завязку и покрывает даже самые неочевидные сценарии сборки.",
            "Очевидные вещи здесь делаются очевидным образом, а на все популярные проблемы есть популярные решения. Есть миллионы вопросов и ответов на стековерфлоу. Если ты не можешь сделать что-то именно в дотнете, тебя скорее всего забанили в гугле. Очень легко найти себе знакомых дотнетчиков, которые будут помогать со сложными особенностями платформы. Написаны тысячи книг.",
            "Процесс изучения отлажен годами, все знают что читать, как делать, у кого спрашивать. При этом сама платформа не суперсложная. Крепкий мидл на другом языке уже через пару дней сможет писать сносный код на C#, пока дело не коснется многопотчки, работы с памятью или оптимизаций."
          ]
        },
        {
          "id": "2",
          "order": 1,
          "type": "TEXT",
          "title": "C# — мощный язык с кучей возможностей\n",
          "paragraphs": [
            "Корная либа достаточно богатая — из коробки ты в дотнете получаешь тысячи утилит, структур данных, и всяких таких вещей. Решать стандартные задачи здесь действительно легко — все есть, обо всем подумали за тебя. Хороший интероп с плюсами докидывает сверху кучу плюсовых либ, обернутых в дотнетные — на случай, если тебя заставят молотить байты в каком-нибудь софте, связанном с видео или звуком.\n",
            "Язык достаточно современный, все самые популярные фичи на рынке в нем или есть, или планируются. Синтаксис полегче чем в Java, потяжелей чем в совсем современных языках вроде Котлина. Шарповый код при компиляции превращается в промежуточный язык, который выполняется JIT-компилятором на клиентской машине — в этом есть свои преимущества, но такой принцип работы не оставляет шансов писать настолько же быстрый код, как на плюсах или голанге. Но C# все ещё достаточно быстрый в своей категории. Если просто сесть и писать незамудренный код, очень долго не будешь упираться в какие-то неожиданные проблемы в производительности самого языка.\n",
            "Язык не супер быстрый — но есть огромное пространство для оптимизаций. Структуры — чтобы хранить данные на стеке, АПИ сборщика мусора, чтобы оптимизировать его работу в конкретных кейсах, есть unsafe — чтобы поработать с указателями и оптимизировать какой-то ботлнек. Богатые инструменты для параллелизма. Есть интринсики, для оптимизаций под конкретные процессоры. Короче, если заморачиваться — скорость работы можно прокачать на раз.\n",
            "В C# мощная поддержка ООП — тут любой код лежит в классах, полный суппорт наследования, а теперь и множественного наследования через дефолтную реализацию интерфейсов. Куча различных модификаторов доступа, возможность разделять ответственность модулей на уровне сборок. Типизация строгая статическая — всё что можно тайпчекается на этапе компиляции, всё что нельзя — метаинфа о типах едет в рантайм, и может быть прочекана там. Сам дизайн языка как будто специально сделан так, чтобы фигачить архитектуру по Бобу и Фаулеру. В C# очень легко объяснить компилятору, какие части системы делают это, а какие то, и кто из них о ком знает.\n",
            "Гораздо меньше шарпы поддерживают функциональную парадигму. Но и здесь есть четкое движение вперед. Недавно завезли слегка кастрированный паттерн-матчинг, есть таплы и почти есть рекорды. Давно есть лямбда выражения. Самый распространненый в дотнете способ работы с коллекциями — LINQ выражения — выполнен полностью в функциональном стиле.\n",
            "Но основную проблему языка это только усугубляет. Для современного ЯПа C# слишком многословный. Они завозят новые функциональные фичи, но огромное количество необходимых синтаксических надстроек не позволит их использовать так же изящно, как в каком-нибудь OCaml. Тут чем дальше, тем хуже. Страшный груз обратной совместимости легко разруливается создателями языка на техническом уровне, но всегда выливается в ещё одно утяжеление синтаксиса. Мне немного стыдно, когда я вижу код минимально рабочей программы на C# — язык буквально отказывается освобождать меня от написания очевидного.\n"
          ]
        }
      ]
    },
    {
      "id": "11",
      "title": "Зачем писать на C++ в 2023 году?",
      "subtitle": "C++ — это язык программирования, основы которого были заложены более 40 лет назад, но который по-прежнему повсеместен. В этой статье мы с вами разберемся, где и почему он используется, и порассуждаем, есть ли у него будущее.",
      "img": "https://upload.wikimedia.org/wikipedia/commons/thumb/1/18/ISO_C%2B%2B_Logo.svg/1200px-ISO_C%2B%2B_Logo.svg.png",
      "views": 1256,
      "createdAt": "23.04.2023",
      "userId": "1",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "order": 1,
          "type": "TEXT",
          "title": "Где сегодня используется C++?",
          "paragraphs": [
            "С++ повсюду. Код, написанный на C++, можно найти в вашем телефоне, в вашей стиральной машине, в вашем автомобиле, в самолетах, в банках и вообще везде, где только можно представить.",
            "Но давайте будем более конкретными. Многие приложения для работы с изображениями, такие как Adobe Photoshop или Illustrator, написаны на C++. 3D-игры также часто пишут на C++. Программное обеспечение для 3D-анимации, моделирования и рендеринга также в основном написано на C++. Манипуляции с изображениями — довольно сложная и ресурсоемкая область, требующая скорости и близости к аппаратной части C++.",
            "Но работа с изображениями — далеко не единственная область, в которой доминирует C++. С большой долей вероятности браузер, который вы используете для чтения этой статьи, также был написан на C++, как, например, Chrome и Firefox.",
            "Если мы спустимся еще ниже и посмотрим на компиляторы и операционные системы, то многие из них написаны на C++. Если нет, то, скорее всего, это C.",
            "Но это все пока только примеры в пределах десктопного мира.",
            "В мире корпоративного программного обеспечения вы, конечно, найдете и другие языки, но там, где критична производительность, вполне обоснованно выбирают C и C++.",
            "В мире встраиваемых систем, где и память, и ЦП более ограничены, чем у десктопных компьютеров, C++ процветает. Независимо от того, смотрите ли вы на свои умные часы, телефон, включаете ли вы стиральную машину, садитесь ли в автомобиль и включаете зажигание, вам следовало бы испытывать немного благодарности в отношении неизвестного C++ разработчика, который сумел не испортить все из-за ошибки сегментации сразу после запуска."
          ]
        },
        {
          "id": "2",
          "order": 2,
          "type": "TEXT",
          "title": "Почему С++ используется до сих пор?",
          "paragraphs": [
            "Итак, мы увидели, что C++ по-прежнему используется почти везде. Но почему? Можно встретить очень много скептиков, которые считают, что это чистой воды легаси и его следует удалять из кодовой базы большинства современных компаний."
          ]
        },
        {
          "id": "2",
          "order": 2,
          "type": "TEXT",
          "title": "Экономическое преимущество",
          "paragraphs": [
            "C++ близок к аппаратному обеспечению, может легко манипулировать ресурсами, поддерживает процедурное программирование для функций, интенсивно использующих ЦП, и является очень быстрым. Он также отлично справляется со сложностями 3D-игр и позволяет создавать многослойные сетевые конфигурации. Все эти преимущества делают его главным выбором для разработки игровых систем, а также инструментария для разработки игр.\n\n",
            "Если вы используете так называемый “современный” язык, такой как Python или Javascript, зачастую вам придется прибегать к написанию некоторых важных функций или библиотек на C или C++, просто чтобы сделать их скорость приемлемой.\n\n",
            "Существует очень мало языков, которые могут конкурировать с C++ по скорости, и один из них это - C.\n\n",
            "Но скорость — это еще не все.\n\n",
            "Вы можете сказать, что вы не так сильно заботитесь о скорости. Вам нужно обрабатывать относительно небольшое количество транзакций, и у вас нет серьезных требований к скорости. Вы предпочитаете код, который легче в написании.\n\n",
            "Вас можно понять.\n\n",
            "Как мы уже говорили ранее, C++ становится все проще в разработке. Конечно, легкость написания современного C++ не идет ни в какое сравнение с Python, но все не так однозначно.\n\n",
            "Некоторые современные языки ориентированы на простоту написания кода, другие — на большие функциональные возможности.\n\n",
            "Когда вы выбираете автомобиль, вы думаете не только о комфорте или скорости, хотя они могут быть очень важны. Скорее всего вам также придется учитывать расход топлива. Делаем ли мы то же самое, когда разрабатываем приложения? Думаем ли мы о том, сколько энергии они будут потреблять? В этом смысле трио C/C++/Rust работает намного лучше, чем все остальные языки. По сути, они находятся совершенно на другом уровне.\n\n"
          ]
        },
        {
          "id": "3",
          "order": 3,
          "type": "IMAGE",
          "src": "https://habrastorage.org/getpro/habr/upload_files/696/78f/beb/69678fbebbe390a2ebd304a6b8327108.png"
        },
        {
          "id": "4",
          "order": 4,
          "type": "TEXT",
          "paragraphs": [
            "Приведенные выше цифры впечатляют.\n\n",
            "Теперь давайте посмотрим на слайд, который был представлен на CPPP Дэмиеном Булом (Damien Buhl).\n\n"
          ]
        }
      ]
    },
    {
      "id": "12",
      "title": "Таков путь или как я познавал Ruby\n",
      "subtitle": "Многие из тех, кто прочитает эту статью, уже давно \"вошли в IT\", а кто-то даже уже успел покинуть наши ряды. Но будут и те, кто только думает о том, чтобы начать свой путь. И я хочу поделиться своим опытом, так как помню, как сложно делать первые шаги и вообще решить, с чего начинать. Особенно потому, насколько недавно это было.",
      "img": "https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Ruby_logo.svg/1200px-Ruby_logo.svg.png",
      "views": 856,
      "createdAt": "12.08.2022",
      "userId": "1",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "order": 1,
          "type": "TEXT",
          "title": "Почему Ruby?\n",
          "paragraphs": [
            "Если бы меня сейчас спросили, почему я выбрал именно Ruby, я бы ответил, что это отличный язык с кодом, который читается как книга, на нем можно быстро сделать web-приложение, которое будет вполне достойно работать и выдерживать большие нагрузки. В фреймворке Rails есть отличные средства автоматизированного тестирования, что ускоряет переход проекта от стадии «программа написана» к стадии «программа работает без ошибок». Так же не могу не отметить, что Ruby on Rails обеспечивает отличную безопасность проекта: при использовании инструментов RoR исключены SQL-инъекции и XSS-атаки, все входные параметры экранируется по умолчанию, выводимые переменные в шаблонах также экранируются. У разработчика просто нет шансов допустить ошибку безопасности (только если он не намеренно сам «выстрелил себе в ногу»).\n\n",
            "Но если бы меня спросили раньше, то я бы думал дольше, чем Internet Explorer загружает странички, и, скорее всего, так бы и не нашел ответа на этот вопрос. Раньше я отшучивался, что я посмотрел на Ruby, он на меня, искра, ruby, безумие. Но как я вообще узнал о таком языке и почему же все-таки выбрал его?\n\n",
            "Когда я начинал учиться в университете, то я изучал такие языки, как С++ и С#, а сам слышал еще о JS, Python, Java и PHP. Я совсем не знал, какой язык выбрать и чем я вообще буду заниматься. Было просто дикое желание стать программистом и связать свою жизнь с разработкой (тогда я еще вообще не представлял о зарплате программистов и знал наверняка, что тестирование не мое). Спустя два курса универа (после второго семестра меня отчислили за академическую задолженность по матанализу, но я восстановился и проучился еще год), я решил отчислиться и ненадолго отложить свои планы, так как нужно было зарабатывать деньги (я в то время совмещал учебу и работу в McDonald’s, но слишком много не заработаешь, и пришлось уделять больше времени работе). К счастью, вопрос с армией был решенным, поэтому мог спокойно работать. Но желание стать программистом никуда не исчезло.\n\n",
            "Я поработал еще немного в другом заведении, а затем устроился администратором в одну кофейню, где, спустя чуть более полугода, меня повысили до зам директора (вот это карьерный рост, скажите вы, но работал я по 100500 часов и еле мог уделять время своей невесте, с которой хотелось бы построить семью). И хоть карьера в общепите уже была довольно неплохой, мне все равно хотелось заниматься именно программированием.\n\n",
            "И вот тут моя работа в общепите помогла мне в реализации моих планов (да-да, сам бы не поверил, если бы такое услышал). Я познакомился с парнем, который на тот момент был нашим постоянным клиентом и, как мне очень повезло, ruby-разработчиком (в последствии, он стал моим лучшим другом и даже был свидетелем на моей свадьбе). Мы с ним разговорились, я поведал ему мою историю, он мне рассказал про свою работу и предложил мне показать, что же за язык такой Ruby и с чем его едят. После всего этого он сказал фразу, которая и проложила мне дорогу в IT: \"Если тебе понравился ruby, я могу тебя научить\". Я согласился и мы начали мое замечательное путешествие в мир программирования.\n\n"
          ]
        },
        {
          "id": "2",
          "order": 2,
          "type": "TEXT",
          "title": "Первые шаги\n",
          "paragraphs": [
            "Оглядываясь назад, я понимаю, что хотел бы изменить мой подход к изучению, что сэкономило бы кучу времени, сил и нервов (как моих, так и моего товарища), но, как говорится, что сделано, того не воротишь. Надеюсь, я помогу избежать вам этих ошибок и пойти изначально по более правильному пути.\n\n",
            "Мое обучение началось с того, что мой товарищ рассказал мне вообще, как появился ruby, фреймворк rails и какие известные проекты были реализованы на нем (как же сильно я удивился, когда услышал, что Netflix, Twitter, Airbnb, SoundCloud, GitHub, Hulu и многие другие были реализованы именно на RoR). К моему счастью, мои родители с самого детства знали, что английский мне определенно пригодиться, поэтому у меня был репетитор по нему с 1 по 11 класс и проблем с английским у меня не было. Так что я мог сразу приступать к изучению (если у вас проблемы с английским или вы его вовсе не знаете, то рекомендую начинать обучение именно с него, без английского языка в IT будет крайне сложно, а местами даже невозможно).\n\n",
            "Мне очень повезло, что я обучался не самостоятельно, так как сам я бы не знал, как и с чего начать. Мой товарищ же составил борду в Trello, чтобы я изучал все в правильной последовательности. Сначала я читал общие статьи: что такое ООП (да, я уже изучал это во время обучения в университете, но прошло 1,5 года, да и изучал я это более подробно, чем давалось на лекциях), основы Linux (раньше я пользовался только Windows, поэтому это было очень актуально и полезно), какие методологии разработки бывают, SOLID, ACID, как пользоваться гитом и так далее. После всего этого я приступил к изучению основ самого Ruby: что такое интерпретатор, rvm, nvm, классы, модули, какие типы данных бывают, что такое pry, блоки, проки, лямбды, методы, область видимости и тому подобное.\n\n",
            "И вот сейчас моя первая ошибка: если что-то непонятно или понятно частично, задавайте вопросы и пробуйте разобраться более подробно. Ведь если вы что-то упустили во время изучения азов, думая, что потом разберетесь, то потом как раз таки появятся проблемы, и придется начинать сначала, а это трата времени. К сожалению, тогда я этого не понимал и допустил столь неприятную ошибку, но об этом подробнее чуть позже.\n\n",
            "Не зная еще, что некоторые основы я изучил весьма посредственно, мы двинулись дальше. Мне предстояло пройти 4 базовых курса на Codecademy: Ruby, Html, CSS и SQL (они бесплатные, поэтому очень рекомендую их пройти, если вы так же, как и я, решили изучать Ruby). И вот тут из-за моей первой ошибки, я ее допустил снова: не пытался разобраться, как работают те или иные методы, как и когда лучше использовать их. Но, к сожалению, мы опять не заметили этой ошибки (сугубо моя вина, так как товарищ был загружен на своем рабочем проекте и не мог постоянно отвлекаться на меня, к тому же, я не задавал никаких вопросов, поэтому ему, как и мне, казалось, что я все понимаю). После этого, мы думали, что я готов к следующему шагу, и теперь поговорим о нем.\n\n"
          ]
        },
        {
          "id": "3",
          "order": 3,
          "type": "TEXT",
          "title": "Фреймворк Rails и последняя незамеченная ошибка\n",
          "paragraphs": [
            "Мне предстояло познакомиться наконец с самим фреймворком Rails и начать писать свой первый проект. Я прочитал все статьи по рельсам, которые сбросил мне товарищ и собирался начинать изучать книгу Agile Web Development with Rails 6, по которой я бы и написал свой первый проект на рельсах. Но на статьях по основам рельсов я опять допустил эту вопиющую ошибку (мое лицо должно быть уже красным от количества граблей, на которые я наступил во время обучения). К сожалению, я шел по книге и мне казалось, что все не так уж и сложно, мне все понятно, все получается (конечно получается, ведь я читал и переписывал то, что было в книге) и я закончил свой первый проект. Неожиданно для меня, меня пригласили на мое первое собеседование (периодически я откликался на вакансии, вдруг повезет)\n\n"
          ]
        }
      ]
    },
    {
      "id": "13",
      "title": "Осваиваем TypeScript: 21 лучшая практика при написании кода\n",
      "subtitle": "\nTypeScript является популярным открытым языком программирования, идеально подходящим для современной разработки.",
      "img": "https://upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Typescript_logo_2020.svg/1200px-Typescript_logo_2020.svg.png",
      "views": 17800,
      "createdAt": "14.05.2023",
      "userId": "1",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "order": 1,
          "type": "TEXT",
          "title": "Лучшая практика 1: строгая проверка типов",
          "paragraphs": [
            "Начнём с самых азов. Представьте, что имеете возможность перехватывать потенциальные ошибки ещё до их возникновения. Звучит слишком хорошо, чтобы быть правдой? Но именно это позволяет вам получить строгая проверка типов в TS. Эта лучшая практика связана с перехватом тонких багов, которые тихо просачиваются в код и вызывают проблемы в дальнейшем.\n",
            "Строгая проверка типов позволяет обеспечить, чтобы все переменные имели те типы, которые вы для них задумали. К примеру, это означает, что в случае объявления переменной с типом string TS убедится, чтобы присвоенное ей значение действительно было строкой, а не числом. Это помогает отлавливать ошибки на ранних стадиях и добиваться должной работы кода.\n",
            "Включить режим строгой проверки типов можно простой установкой параметра “strict”: true в файле tsconfig.json (по умолчанию должен быть true). В результате TS активирует набор проверок, перехватывающих определённые ошибки, которые в противном случае, остались бы незамеченными.\n",
            "Вот пример того, как проверка типов может избавить вас от распространённой ошибки:\n"
          ]
        },
        {
          "id": "2",
          "order": 2,
          "type": "CODE",
          "code": "let userName: string = \"John\";\nuserName = 123; // TypeScript выбросит исключение, поскольку \"123\" не является строкой."
        },
        {
          "id": "3",
          "order": 3,
          "type": "TEXT",
          "title": "Лучшая практика 2: вывод типов",
          "paragraphs": [
            "TypeScript построен вокруг конкретного обозначения типов, но это не значит, что вы обязаны все определять явно.\n",
            "Вывод типов – это возможность компилятора TS автоматически определять тип переменной на основе присвоенного ей значения. Это означает, что вам не нужно явно указывать тип переменной при каждом её объявлении. Вместо этого компилятор будет анализировать присвоенное ей значение и выводить соответствующий тип.\n",
            "Например, в следующем фрагменте кода TS автоматически выведет тип name как string:\n"
          ]
        },
        {
          "id": "4",
          "order": 4,
          "type": "CODE",
          "code": "let name = \"John\";\n"
        },
        {
          "id": "5",
          "order": 5,
          "type": "TEXT",
          "paragraphs": [
            "Эта возможность особенно полезна при работе со сложными типами либо при инициализации переменной со значением, возвращаемым функцией.\n",
            "Но здесь нужно помнить, что вывод типов – это не волшебная палочка, и иногда лучше указывать типы явно, особенно при работе с их сложными вариантами либо в случаях, когда требуется использовать определённый тип.\n"
          ]
        },
        {
          "id": "6",
          "order": 6,
          "type": "TEXT",
          "title": "Лучшая практика 3: линтеры",
          "paragraphs": [
            "Линтеры – это инструменты, которые помогают улучшить код за счёт его проверки на соответствие набору правил и руководств.\n",
            "Для TS существует несколько линтеров вроде TSLint и ESLint, которые помогают добиться согласованности стиля кода и перехватить потенциальные ошибки. Эти линтеры можно настроить на обнаружение таких ошибок, как упущенные точки с запятой, неиспользуемые переменные и не только.\n"
          ]
        }
      ]
    },
    {
      "id": "14",
      "title": "Инфляция: почему растут цены и кто может их сдержать",
      "subtitle": "Если цены постоянно растут — значит, в стране инфляция. Разбираемся, в чем причина такого положения дел, может ли инфляция быть полезной и как ее контролируют.",
      "img": "https://gpbi-1c-prod-bitrix-uploads.storage.yandexcloud.net/resize_cache/14229/dc5e10191752e69d7cdeb29f8e02c154/iblock/ec7/ec7bfa31e01e3eab19f81c4f27ffcdc7/inflation-main.jpg",
      "views": 6534,
      "createdAt": "21.04.2022",
      "userId": "1",
      "type": [
        "ECONOMICS"
      ],
      "blocks": [
        {
          "id": "1",
          "order": 1,
          "type": "TEXT",
          "title": "Что такое инфляция?",
          "paragraphs": [
            "Инфляция — это устойчивый рост общего уровня цен на товары и услуги. При этом отдельные товары могут заметно дорожать, другие — дешеветь, а третьи — вообще не меняться в цене.",
            "В основном цены на товары и услуги зависят от спроса и предложения на рынке, а некоторые цены регулирует государство. Например, если у фермеров случился хороший урожай овощей, цены на помидоры и картошку будут падать. Если государство в это же время повысило акцизы на алкоголь, цены на спиртное резко пойдут вверх. При этом общий уровень цен может вырасти лишь чуть-чуть."
          ]
        },
        {
          "id": "2",
          "order": 2,
          "type": "TEXT",
          "title": "Как измеряют инфляцию?",
          "paragraphs": [
            "В России инфляцию измеряют так же, как и в большинстве стран мира. Берут так называемую потребительскую корзину — набор продуктов, товаров и услуг, которые регулярно покупает среднестатистический человек или семья. В нее попадает более 500 товаров и услуг — например, продукты, одежда, коммунальные услуги, бытовая техника, автомобили.",
            "При этом надо понимать, что кто-то никогда не ест мясо и не ездит на машине. А кто-то, наоборот, без мяса жить не может и машины меняет каждый год. Потребительская корзина отражает среднее потребление всех жителей страны.",
            "Некоторые из этих товаров люди покупают часто: хлеб, овощи, мясо, бензин. А другие, например, автомобиль, приобретают редко, но зато эти расходы очень большие по сравнению с тратами на те же хлеб, овощи и мясо. Таким образом, при расчете потребительской корзины автомобиль занимает в ней большую долю, чем хлеб.",
            "Стоимость этой условной корзины меняется от месяца к месяцу. Это изменение и есть инфляция."
          ]
        },
        {
          "id": "3",
          "order": 3,
          "type": "TEXT",
          "title": "Почему говорят, что инфляция снижается, если цены растут?\n",
          "paragraphs": [
            "Инфляция — это всегда рост цен. При низкой инфляции цены растут очень медленно, но все же растут. Когда говорят, что инфляция снижается, это значит, что потребительская корзина дорожает медленнее, чем в прошлые годы."
          ]
        }
      ]
    },
    {
      "id": "15",
      "title": "Как работает процессор?",
      "subtitle": "Процессор",
      "img": "https://www.redhat.com/sysadmin/sites/default/files/styles/google_discover/public/2020-07/cpu-564771_1920%20Cropped.jpg?itok=hDSdriO6",
      "views": 1232,
      "createdAt": "21.04.2021",
      "userId": "1",
      "type": [
        "COMPUTER_SCIENCE"
      ],
      "blocks": [
        {
          "id": "1",
          "order": 1,
          "type": "TEXT",
          "title": "ECMAScript2023 (ES14)",
          "paragraphs": [
            "Традиционно обновления ECMAScript публикуются в июне. Но уже сейчас можно посмотреть 14-ю редакцию ECMAScript от 2023, которая сейчас находится в статусе freezed, т.е. никакие изменения в нее вноситься уже не будут.",
            "В данной версии спецификации не такой большой список изменений, что абсолютно нормально когда мы переходим на годовой цикл релиза.",
            "Итак, спецификация 2023 года представила нам методы toSorted, toReversed, with, findLast и findLastIndex для Array.prototypeи TypedArray.prototype,\nа также метод toSpliced для Array.prototype.",
            "Кроме того добавлена поддержка #! комментарии в начале файлов для облегчения запуска исполняемых файлов ECMAScript.",
            "и разрешено использовать Symbols в качестве ключей в WeakMap.\n",
            "Подробнее обо всем можно почитать в официальном репозитории организации Ecma International TC39.\n"
          ]
        }
      ]
    },
    {
      "id": "16",
      "title": "Экономисты описали модель развития России по аналогии с Китаем",
      "subtitle": "Российская экономика оказалась в ситуации «трех циркуляций», пишет близкий к правительству Центр макроэкономического анализа и краткосрочного прогнозирования. Эта модель аналогична китайской модели «двух циркуляций», в рамках которой приоритет отдается внутреннему спросу, а внешнеэкономическим операциям отводится вспомогательная роль. Впрочем, есть риск, что три контура — экспортный, государственный и ориентированный на внутренний рынок бизнес-контур — начнут «поедать себя», признает ЦМАКП",
      "img": "https://cdn.forbes.ru/forbes-static/c/1304x734/new/2023/06/GettyImages-1435495564-kopia-649d2f48e945a.webp",
      "views": 421,
      "createdAt": "29.07.2023",
      "userId": "1",
      "type": [
        "ECONOMICS"
      ],
      "blocks": [
        {
          "id": "1",
          "order": 1,
          "type": "TEXT",
          "title": "Основная информация",
          "paragraphs": [
            "Модель развития российской экономики можно описать по аналогии с китайской моделью «двойной циркуляции», указывает в докладе «Уроки на долгосрочный период: что означает «поворот к себе»» экономист Центра макроэкономического анализа и краткосрочного прогнозирования (ЦМАКП) Дмитрий Белоусов. «Сама логика нашего развития выталкивает нас в своеобразный аналог китайской экономики «двух циркуляций», — констатируется в докладе.",
            "«Двойная циркуляция» — китайская стратегия экономического развития до 2035 года. Она опирается на внутреннее потребление, а росту экспорта и инвестиций отводится вспомогательная роль. В случае с Россией речь идет об экономике «трех циркуляций» — комбинации конкурентоспособного экспорта, опоры на внутренний спрос и определения приоритетных направлений развития государством.",
            "Экспортеры зарабатывают дефицитный ресурс — валюту, за счет которой можно покупать импортное оборудование и технологии, описана логика модели в докладе. Государство обеспечивает безопасность в широком смысле (оборонную, продовольственную, социальную, технологическую), при этом активно применяя методы планирования — получает качественные ресурсы «под план» и по плановым ценам. Бизнес несет инновационные риски, выстраивает новые системы кооперации, создает рабочие места и приносит доходы регионам.",
            "В этой модели выручка от экспорта должна идти на восстановление региональной экономики, бизнес — переориентироваться на внутреннего потребителя, а государство — обеспечить интересы всех экономических агентов такой системы, объяснила Forbes доцент кафедры экономической теории РЭУ имени Г.В. Плеханова Екатерина Новикова.",
            "«Сомнений, что такую модель можно использовать, нет, — подчеркивает директор Института народнохозяйственного прогнозирования РАН Александр Широв. — Это комбинация из сбалансированной торговли с «недружественными» странами, расширения кооперации с Китаем, Индией, Турцией, ближневосточными странами и модернизации производства на основе внутреннего спроса. Такая политика будет селективной: государство будет выбирать приоритетные отрасли и давать им преференции». ",
            "«Многие экономисты склоняются к тому, что после распада Советского Союза наиболее приоритетной моделью для нашей страны было бы последовать примеру Китая, противопоставив государству рынок, а значит, бизнес, но при этом сохраняя функцию регулирования рынка за государством, — отмечает Новикова. — Вся геополитическая ситуация вынуждает Россию следовать китайской модели развития, где большое внимание уделяется внутреннему рынку со значительными вложениями в инфраструктурные проекты, с привлечением дополнительных человеческих ресурсов, а также воссозданием технологического потенциала страны»."
          ]
        },
        {
          "id": "2",
          "order": 2,
          "type": "TEXT",
          "title": "Made in China",
          "paragraphs": [
            "О переходе от модели «мировой фабрики» к «мировому супермаркету» — самому большому рынку сбыта товаров — Пекин объявил в 2020 году. Огромное население отныне должно обеспечивать не дешевую рабочую силу, а внутренний спрос на товары и услуги. «Китай обнаружил себя частью мировой экономики, подчиненной Западу. Быть «сборочной фабрикой» не соответствовало китайским амбициям как древнейшей цивилизации», — отметил Белоусов. ",
            "Смена парадигмы не была спонтанной реакцией на торговую войну с главным геополитическим соперником — США. Китай начал развивать внутренний рынок сразу после мирового финансового кризиса 2008 года, когда стало очевидно, что экономический рост за счет западной модели расширения внешних рынков и получения дешевых кредитов постепенно уходит в прошлое, пояснила Екатерина Новикова. Одновременно Китай инвестировал прибыль от экспорта в преодоление технологической зависимости. Расходы на научные исследования и разработки выросли с 1,7% ВВП в 2010 году до 2,4% ВВП в 2020-м, и КНР планирует увеличить их до 2,52% ВВП к 2025 году. Причем всего 20% вносит государство и около 76% — предприятия. ",
            "Цель китайской модели — стать неуязвимой для мировых кризисов и внешних шоков, повысить доходы и уровень жизни граждан, а «цели России — стать полноценным субъектом и отдать социальный долг, чтобы общество в полной мере ощутило от этого плоды», пояснил Белоусов. «Для России работать в режиме сырьевой / «сборочной периферии» не получится, а вот в режиме разделения компетенций с новыми индустриальными странами — вполне», — отмечается в докладе ЦМАКП.",
            "«Углеводородной ренты, по большому счету, тоже больше не будет, — констатирует Белоусов. — С учетом прогноза мирового спроса доля поступлений от экспорта углеводородов упадет до 7% ВВП уже к 2030 году — вдвое меньше привычного уровня». «Уже сейчас российская экономика не может быть отнесена к числу классических «углеводородных» держав, таких как ОАЭ, Саудовская Аравия или Казахстан», — подчеркивается в докладе.",
            "Доходы России от экспорта перестали устойчиво расти еще после мирового финансового кризиса 2008–2009 года, отмечает Широв. Модель «мировой скважины» изжила себя и без «спецоперации»*, подчеркивает Белоусов: «Просто теперь придется переходить на новую парадигму быстро. Так бы мы очухались в 2030–2035 годах, когда деньги уже закончились»."
          ]
        }
      ]
    },
    {
      "id": "17",
      "title": "Неустойчивое равновесие»: эксперты назвали «узлы напряженности» для экономики России",
      "subtitle": "Хотя экономике России прочат рост в 2023 году, баланс неустойчив, считают аналитики Центра макроэкономического анализа и краткосрочного прогнозирования. Перспективы перехода от посткризисной стабилизации к стагнации или росту зависят от того, как разрешатся несколько «узлов напряженности",
      "img": "https://cdn.forbes.ru/forbes-static/c/1304x734/new/2023/05/IMG-0865-646cf34522102.webp",
      "views": 4231,
      "createdAt": "26.05.2023",
      "userId": "1",
      "type": [
        "ECONOMICS"
      ],
      "blocks": [
        {
          "id": "1",
          "order": 1,
          "type": "TEXT",
          "title": "Поворот к росту",
          "paragraphs": [
            "Экономика России на удивление малой кровью перенесла санкционный шок, а поворот к росту наметился уже в марте 2023 года, оценивают эксперты Центра макроэкономического анализа и краткосрочного прогнозирования (ЦМАКП). Однако говорить об устойчивом выходе на траекторию роста рано. Дальнейшая динамика экономики зависит от того, удастся ли разрешить четыре «узла напряженности», пишет ЦМАКП в докладе «О механизме экономической стабилизации в кризисный период». Речь идет о дисбалансе во внешней торговле и инвестициях, дефиците бюджета и ситуации с инфляцией.",
            "По оценке ЦМАКП, признаки улучшения ситуации в начале весны наблюдались практически по всем направлениям экономической активности. «В марте произошел заметный рывок в сфере производства, который ознаменовал поворот российской экономики к росту», — указывают аналитики ЦМАКП. Производство выросло на 0,6% в марте по сравнению с февралем (оценка с устранением сезонности). Выпуск растет в подавляющем большинстве обрабатывающих производств, кроме автопрома. Индекс инвестиционной активности резко вырос в марте почти до исторических максимальных значений, как в 2021 году. ",
            "Началом восстановительного роста можно считать уже конец лета 2022 года, комментирует выводы ЦМАКП директор группы суверенных и региональных рейтингов АКРА Дмитрий Куликов. «В августе-сентябре стало заметно, что промпроизводство начало возврат к докризисным уровням, где-то с сентября-октября начала оживать оптовая торговля, розничная торговля сильно подросла в декабре-январе. Совокупность этих поворотных точек дала довольно непрерывную картину восстановления в индексе базовых отраслей с минимума в июне к текущим значениям (последние полные данные — за март 2023-го). Эти значения на 1,1–1,2% ниже, чем в конце 2021 года», — пояснил экономист. Это не противоречит ни оценке ВВП от Минэкономразвития (-1,1% в марте в годовом выражении), ни оперативной оценке Росстата за I квартал (-1,9% год к году), добавил Куликов.",
            "Возобновление роста ВВП России в этом году — наиболее вероятный сценарий развития событий. Минэк прогнозирует рост ВВП в 2023 году на 1,2%, ЦБ — в диапазоне 0,5–2%. По прогнозу ЦМАКП, в 2023 году экономика вырастет на 0,8–1,1%. ",
            "«Отдельный вопрос, насколько устойчиво нынешнее восстановление экономики», — отметил руководитель направления анализа и прогнозирования макроэкономических процессов ЦМАКП Дмитрий Белоусов. Его обеспечивают строительство (в том числе восстановление разрушенной инфраструктуры Донбасса), рост гособоронзаказа, бюджетное финансирование потребления малообеспеченных (пособия семьям с детьми и выплаты мобилизованным). Но потенциал этих факторов иссякает. Ситуацию в экономике ЦМАКП он охарактеризовал как «неустойчивое равновесие». Что будет дальше — развитие или стагнация, — зависит от того, как удастся разрешить несколько критически важных «узлов напряженности»."
          ]
        },
        {
          "id": "2",
          "order": 2,
          "type": "TEXT",
          "title": "Дисбаланс во внешней торговле",
          "paragraphs": [
            "Дестабилизация всей системы внешнеэкономических связей России в 2022 году привела к сжатию импорта и экспорта. Причем импорт сократился существенно больше экспорта. Сейчас ситуация ровно обратная, отмечает ЦМАКП. Экспорт продолжает ускоренно снижаться, а импорт растет. Причем гораздо быстрее растет импорт готовых потребительских товаров, а не инвестиционных (машин, оборудования, электронных компонентов для промышленности).",
            "«Происходит нормализация торгового и платежного баланса, — спокоен директор Института народнохозяйственного прогнозирования РАН Александр Широв. — Весной и летом 2022 года рекордный профицит текущего счета платежного баланса представлял проблему». Теперь же сложилась «уникальная ситуация», при которой импорт является не сдерживающим, а поддерживающим экономику фактором. «Он поддерживает и потребительский спрос, и производство, где используются импортные комплектующие, и в меньшей степени — инвестиционный спрос», — пояснил Широв.  ",
            "ЦМАКП предупреждает, что стремительное восстановление импорта влечет риск, что к моменту «перезапуска» по крайней мере части российских производств соответствующие ниши на рынках уже будут заняты продукцией производителей из дружественных стран — Китая, Индии, Белоруссии, Ирана. ",
            "«Нормализация торгового баланса может повлечь и риски ослабления рубля, — предупредил Широв. — Но сейчас курс скорее зависит от разовых операций, в частности, по выкупу иностранных активов, дивидендных выплат крупных экспортеров. В этих условиях серьезного потенциала ослабления курса рубля нет». "
          ]
        }
      ]
    },
    {
      "id": "18",
      "title": "Эрдоган выиграл выборы: почему это плохо для турецкой лиры",
      "subtitle": "За последние пять лет лира к доллару ослабла почти на 80%, а инфляция в стране по итогам апреля превысила 43% в годовом выражении. Продолжение «неортодоксальной» монетарной политики Реджепа Эрдогана может привести к тому, что турецкая лира потеряет около трети стоимости к доллару еще до конца года, считают аналитики",
      "img": "https://cdn.forbes.ru/forbes-static/c/1304x734/new/2023/05/GettyImages-1237364283-copy-6474c92495be0.webp",
      "views": 5324,
      "createdAt": "29.05.2023",
      "userId": "1",
      "type": [
        "ECONOMICS"
      ],
      "blocks": [
        {
          "id": "1",
          "order": 1,
          "type": "TEXT",
          "title": "Что случилось",
          "paragraphs": [
            "В понедельник, 29 мая, курс турецкой лиры к доллару опускался на 0,55%, до 20,1 лиры за доллар, приблизившись к рекордному минимуму, которого турецкая валюта достигла на прошлой неделе (20,47 за доллар). Так рынок встретил новости о победе 28 мая во втором туре президентских выборов действующего главы государства Реджепа Тайипа Эрдогана, который на 4% обошел оппозиционного кандидата Кемаля Кылычдароглу. ",
            "Эрдоган занимает президентский пост с 2014 года, а до этого с 2003 года был премьер-министром. Он известен как сторонник неортодоксального взгляда на денежно-кредитную политику и выступает за снижение ставок для борьбы с инфляцией.",
            "Что ждет турецкую валюту?"
          ]
        },
        {
          "id": "2",
          "order": 2,
          "type": "TEXT",
          "title": "Почему лира падает",
          "paragraphs": [
            "Основные факторы, которые привели к такому значительному падению лиры в последние годы, это достаточно большой дефицит во внешней торговле, который сохраняется на протяжении длительного времени, безусловно высокая инфляция и политика ЦБ Турции по снижению ставок при таком уровне роста потребительских цен, перечисляет экономист Егор Сусин. «\u200EВ последние месяцы к этому добавились резкий рост дефицита бюджета и сокращение резервов»\u200E, — продолжает он. ",
            "В рамках традиционной монетарной политики банки при высокой инфляции повышают ставки, чтобы снизить потребительскую активность населения и охладить кредитование. Эрдоган уверен, что более низкие ставки должны увеличить инвестиции, занятость и экспорт и в итоге снизить инфляцию. Те главы ЦБ, которые, вопреки воле Эрдогана, повышали ставку, платили за это должностью. Так, в марте 2021 года с поста главы ЦБ Турции был уволен бывший министр финансов страны Наджи Агбал. Произошло это всего через несколько дней после того, как ЦБ Турции повысил ставку с 17% до 19% на фоне инфляции более 15%. Новый глава турецкого регулятора Шахап Кавджиоглу (до сих пор в должности) в сентябре 2021 года начал цикл снижения ставки — всего за три месяца она опустилась с 19% до 14%, а инфляция выросла до 36%. После резкого снижения ставок только в ноябре 2021-го лира подешевела к доллару на 30%.",
            "Для сдерживания падения курса национальной валюты ЦБ в декабре 2021 года принял экстренные меры. Во-первых, ставка по депозитам в лирах была поднята на 3% выше учетной. Если же получалось так, что доход по таким депозитам за период оказывался ниже, чем по депозиту в валюте, разница выплачивалась государством. Для популяризации таких депозитов местный ЦБ также ввел комиссию за хранение иностранной валюты в банках на 1,5% в год. Таким образом, за 2022 год доля депозитов в твердых\u200E валютах снизилась с 65% до 47%, а доля депозитов в лире выросла до 53%. Также ЦБ активно проводил валютные интервенции. Как подсчитал Bloomberg, за последние полтора года турецкий ЦБ потратил почти $200 млрд на поддержку лиры.",
            "Тем не менее стабилизировать лиру надолго такие меры не помогли. Инфляция на фоне растущих цен на энергоресурсы продолжала расти, к октябрю 2022 года рост цен ускорился до 85% в годовом выражении — это максимум более чем за 20 лет. Несмотря на это, ЦБ продолжал снижать ставку. Таким образом за неполных два года она снизилась с 19% до 8,5%. Причем в этом процессе участвовал сам Эрдоган. «Моя самая важная битва — против процентной ставки. Мой главный враг — процентная ставка. Мы уже опустили ее до 12%. Этого достаточно? Этого недостаточно, нужно еще ниже», — говорил турецкий лидер в сентябре 2022 года.",
            "Дефицит внешней торговли в августе также достиг рекорда и составил $11,2 млрд. Еще большую нагрузку для экономики создали разрушительные землетрясения в феврале этого года. Турецкая конфедерация предприятий и бизнеса оценила общий ущерб от них в $84,1 млрд. Чистые валютные резервы Турции в мае этого года оказались в отрицательной зоне впервые с 2002 года. На этом фоне, с середины февраля по май, турецкая лира ослабла по отношению к доллару более чем на 30%. "
          ]
        }
      ]
    }
  ],
  "comments": [
    {
      "id": "1",
      "text": "Вот так статья!",
      "articleId": "1",
      "userId": "1"
    },
    {
      "id": "2",
      "text": "Интересно, что добавят в ECMAScript 2024?",
      "articleId": "1",
      "userId": "1"
    },
    {
      "id": "3",
      "text": "Ни о чём, обновляться не буду",
      "articleId": "1",
      "userId": "2"
    },
    {
      "articleId": "2",
      "userId": "1",
      "text": "тест",
      "id": "Z1rMSy2"
    },
    {
      "articleId": "3",
      "userId": "1",
      "text": "снова тест!",
      "id": "aH-_NkF"
    },
    {
      "articleId": "1",
      "userId": "1",
      "text": "test",
      "id": "wA4TUlD"
    },
    {
      "articleId": "10",
      "userId": "1",
      "text": "test",
      "id": "_chNOsz"
    },
    {
      "articleId": "10",
      "userId": "1",
      "text": "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab amet assumenda, atque cupiditate, dolor dolorum ducimus eius, enim exercitationem fuga ipsam magnam maxime minima molestias nesciunt nisi numquam officiis quaerat quod quos tempora veritatis vitae voluptas! Architecto, asperiores, consequuntur dignissimos doloribus earum enim et magni necessitatibus officiis provident ratione recusandae sunt suscipit tempore totam ullam voluptates! Ab accusamus accusantium ad architecto, at consectetur consequuntur ducimus enim esse et exercitationem explicabo illo inventore iure maxime minima odit omnis perspiciatis placeat porro provident quasi quidem saepe, soluta tempora temporibus vitae. Animi consequatur ducimus enim laborum tempora. Aspernatur consectetur nisi rem sed voluptates!",
      "id": "97H9s4S"
    },
    {
      "articleId": "1",
      "userId": "2",
      "text": "test 1",
      "id": "D3rLi4p"
    }
  ],
  "users": [
    {
      "id": "1",
      "username": "admin",
      "password": "123",
      "roles": [
        "ADMIN"
      ],
      "features": {
        "isArticleRatingEnabled": true,
        "isCounterEnabled": true,
        "isAppRedesigned": true
      },
      "jsonSettings": {
        "theme": "app_dark_theme",
        "isFirstVisit": true,
        "settingsPageHasBeenOpen": false,
        "isArticlesPageWasOpened": true
      },
      "avatar": "https://media.wired.com/photos/644318b17b25a434b1f3bbd7/1:1/w_1350,h_1350,c_limit/security_hacker_names.jpg"
    },
    {
      "id": "2",
      "username": "user",
      "password": "123",
      "roles": [
        "USER"
      ],
      "features": {
        "isArticleRatingEnabled": false,
        "isCounterEnabled": false,
        "isAppRedesigned": true
      },
      "jsonSettings": {
        "theme": "app_dark_theme",
        "isFirstVisit": true,
        "settingsPageHasBeenOpen": false,
        "isArticlesPageWasOpened": true
      },
      "avatar": "https://images.unsplash.com/photo-1633332755192-727a05c4013d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8dXNlcnxlbnwwfHwwfHx8MA%3D%3D&w=1000&q=80"
    },
    {
      "id": "3",
      "username": "manager",
      "password": "123",
      "roles": [
        "MANAGER"
      ],
      "features": {
        "isArticleRatingEnabled": false,
        "isCounterEnabled": true
      },
      "jsonSettings": {
        "theme": "app_dark_theme",
        "isFirstVisit": true,
        "settingsPageHasBeenOpen": false,
        "isArticlesPageWasOpened": true
      },
      "avatar": "https://images.unsplash.com/photo-1633332755192-727a05c4013d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8dXNlcnxlbnwwfHwwfHx8MA%3D%3D&w=1000&q=80"
    },
    {
      "id": "4",
      "username": "testuser",
      "password": "123",
      "roles": [
        "ADMIN"
      ],
      "features": {
        "isArticleRatingEnabled": true,
        "isCounterEnabled": false
      },
      "jsonSettings": {
        "theme": "app_dark_theme",
        "isFirstVisit": true,
        "settingsPageHasBeenOpen": false
      },
      "avatar": "https://media.wired.com/photos/644318b17b25a434b1f3bbd7/1:1/w_1350,h_1350,c_limit/security_hacker_names.jpg"
    }
  ],
  "profile": [
    {
      "id": "1",
      "firstName": "Даниил",
      "lastName": "Переверзев",
      "age": 21,
      "currency": "EUR",
      "country": "Ukraine",
      "city": "Almatyy",
      "username": "admin",
      "avatar": "https://images.unsplash.com/photo-1633332755192-727a05c4013d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8dXNlcnxlbnwwfHwwfHx8MA%3D%3D&w=1000&q=80"
    },
    {
      "id": "2",
      "firstName": "Иван",
      "lastName": "Иванов",
      "age": 44,
      "currency": "RUB",
      "country": "Russia",
      "city": "Moscow",
      "username": "user",
      "avatar": "https://media.wired.com/photos/644318b17b25a434b1f3bbd7/1:1/w_1350,h_1350,c_limit/security_hacker_names.jpg"
    },
    {
      "id": "3",
      "firstName": "Михаил",
      "lastName": "Михаилов",
      "age": 48,
      "currency": "RUB",
      "country": "Russia",
      "city": "Moscow",
      "username": "manager",
      "avatar": "https://shapka-youtube.ru/wp-content/uploads/2021/02/prikolnaya-avatarka-dlya-patsanov.jpg"
    },
    {
      "id": "4",
      "firstName": "test",
      "lastName": "test",
      "age": 423,
      "currency": "EUR",
      "country": "Russia",
      "city": "Moscow",
      "username": "testuser",
      "avatar": "https://i.pinimg.com/736x/cf/96/87/cf96875fac20a7dc1baf3a0fa6ac60fa.jpg"
    }
  ],
  "article-ratings": [
    {
      "id": "1",
      "rate": 4,
      "feedback": "Хорошая статья",
      "userId": "1",
      "articleId": "1"
    },
    {
      "id": "2",
      "rate": 4,
      "feedback": "Хорошая статья",
      "userId": "1",
      "articleId": "2"
    },
    {
      "articleId": "3",
      "userId": "1",
      "rate": 2,
      "id": "NeAndnH"
    },
    {
      "articleId": "4",
      "userId": "1",
      "rate": 5,
      "id": "V2Dn1Lf"
    },
    {
      "articleId": "6",
      "userId": "1",
      "rate": 4,
      "feedback": "test",
      "id": "TrA6VN1"
    },
    {
      "articleId": "7",
      "userId": "1",
      "rate": 3,
      "id": "whDK7ZX"
    },
    {
      "articleId": "5",
      "userId": "1",
      "rate": 4,
      "feedback": "круто",
      "id": "L0XrR2G"
    },
    {
      "articleId": "dDlZ81c",
      "userId": "2",
      "rate": 2,
      "feedback": "норм статья",
      "id": "71cqpIw"
    },
    {
      "articleId": "1",
      "userId": "2",
      "rate": 4,
      "feedback": "good",
      "id": "Uio-MHA"
    }
  ],
  "profile-ratings": [
    {
      "id": "1",
      "rate": 4,
      "userId": "1",
      "profileId": "1"
    },
    {
      "profileId": "2",
      "userId": "1",
      "rate": 4,
      "id": "6Y8wxtc"
    },
    {
      "profileId": "4",
      "userId": "1",
      "rate": 1,
      "id": "_JcPya5"
    }
  ]
}
